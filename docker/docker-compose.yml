services:
  # Kafka environment
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - '29092'
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  init-kafka:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic wikimedia-recent-change-events --replication-factor 1 --partitions 5
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic wikimedia-filtered-recent-change-events --replication-factor 1 --partitions 5
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092,PLAINTEXT_INTERNAL://localhost:9092
      SCHEMA_REGISTRY_DEBUG: 'true'

  # Backup database
  backup-postgres:
    container_name: backup-postgres
    image: postgres:latest
    ports:
      - "5433:5432"
    volumes:
      - backup_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=flink
      - POSTGRES_DB=wikimedia_backup_data

  # Druid environment
  postgres:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
  coordinator:
    image: apache/druid:30.0.1
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - postgres
      - kafka
      - zookeeper
      - schema-registry
    ports:
      - "8082:8081"
    command:
      - coordinator
    env_file:
      - environment
  broker:
    image: apache/druid:30.0.1
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - postgres
      - kafka
      - zookeeper
      - schema-registry
    ports:
      - "8083:8082"
    command:
      - broker
    env_file:
      - environment
  historical:
    image: apache/druid:30.0.1
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on:
      - postgres
      - kafka
      - zookeeper
      - schema-registry
    ports:
      - "8084:8083"
    command:
      - historical
    env_file:
      - environment
  middlemanager:
    image: apache/druid:30.0.1
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on:
      - postgres
      - kafka
      - zookeeper
      - schema-registry
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - environment
  router:
    image: apache/druid:30.0.1
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - postgres
      - kafka
      - zookeeper
      - schema-registry
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - environment

  # Apache Superset
  superset:
    image: amancevice/superset:latest
    container_name: superset
    ports:
      - 8088:8088

# Druid volumes
volumes:
  backup_data: {}
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}